#pragma version 10

smart_contracts.arduino_algorand.contract.ArduinoAlgorand.approval_program:
    // smart_contracts/arduino_algorand/contract.py:4
    // class ArduinoAlgorand(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@6
    method "set(uint64)void"
    method "read_total()uint64"
    txna ApplicationArgs 0
    match main_set_route@2 main_read_total_route@3
    err // reject transaction

main_set_route@2:
    // smart_contracts/arduino_algorand/contract.py:7
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/arduino_algorand/contract.py:4
    // class ArduinoAlgorand(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/arduino_algorand/contract.py:7
    // @arc4.abimethod()
    callsub set
    int 1
    return

main_read_total_route@3:
    // smart_contracts/arduino_algorand/contract.py:12
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub read_total
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@6:
    // smart_contracts/arduino_algorand/contract.py:4
    // class ArduinoAlgorand(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.arduino_algorand.contract.ArduinoAlgorand.set(state: uint64) -> void:
set:
    // smart_contracts/arduino_algorand/contract.py:7-8
    // @arc4.abimethod()
    // def set(self, state: UInt64) -> None:
    proto 1 0
    // smart_contracts/arduino_algorand/contract.py:9
    // self.total = state
    byte "total"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.arduino_algorand.contract.ArduinoAlgorand.read_total() -> uint64:
read_total:
    // smart_contracts/arduino_algorand/contract.py:12-13
    // @arc4.abimethod()
    // def read_total(self) ->UInt64:
    proto 0 1
    // smart_contracts/arduino_algorand/contract.py:14
    // return self.total
    int 0
    byte "total"
    app_global_get_ex
    assert // check total exists
    retsub
